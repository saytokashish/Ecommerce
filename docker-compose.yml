version: '3.8'
services:
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "8081:8081"
    container_name: "user-service"
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    restart: always

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    ports:
      - "8082:8082"
    container_name: "order-service"
    networks:
      - my-network
    depends_on:
      mysqldb:
        condition: service_healthy
    restart: always
    environment:
      - SPRING_APPLICATION_JSON={"spring.datasource.url":"jdbc:mysql://mysqldb:3306/order_db","spring.datasource.username":"root","spring.datasource.password":"root"}

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    ports:
      - "8083:8083"
    container_name: "product-service"
    networks:
      - my-network
    depends_on:
      mongo:
        condition: service_healthy
    restart: always
    environment:
      - SPRING_APPLICATION_JSON={"spring.data.mongodb.uri":"mongodb://mongo:27017/products"}

  mysqldb:
    image: 'mysql:latest'
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=order_db
      - MYSQL_WAIT_TIMEOUT=28800
      - MYSQL_INTERACTIVE_TIMEOUT=28800
      - MYSQL_MAX_CONNECTIONS=200
    container_name: "mysqldb"
    networks:
      - my-network
    healthcheck:
      test: [ 'CMD','mysqladmin','ping','-h','localhost' ]
      timeout: 20s
      retries: 10

  mongo:
    image: 'mongo:latest'
    ports:
      - "27017:27017"
    container_name: "mongo"
    networks:
      - my-network
    healthcheck:
      test: [ 'CMD','mongo','--eval','db.adminCommand("ping")' ]
      timeout: 20s
      retries: 10

networks:
  my-network: 